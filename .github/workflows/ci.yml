name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Job
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: 🔍 Code formatting check
        run: |
          ruff format --check .
          echo "✅ Code formatting is correct"

      - name: 🧹 Linting
        run: |
          ruff check . --output-format=github
          echo "✅ Linting passed"

      - name: 🏷️ Type checking
        run: |
          mypy src/rag_audio/ --show-error-codes
          echo "✅ Type checking passed"

      - name: 🧪 Run tests with coverage
        run: |
          pytest tests/ -v \
            --cov=src/rag_audio \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=test-results.xml

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml
            htmlcov/

  # Security Scanning Job
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🔒 Run pip-audit security scan
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements.txt pyproject.toml

      - name: 🛡️ Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: 📋 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: bandit-report.json

  # Build and Push Container
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: 🔍 Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif

      - name: 📋 Upload SBOM and scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-artifacts
          path: |
            sbom.spdx.json
            trivy-results.sarif

  # Evaluation Quality Gate
  eval-gate:
    name: Quality Gate Evaluation
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.8.1
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install dependencies
        run: |
          pip install -e .[dev]

      - name: 🎯 Run evaluation (placeholder)
        run: |
          # Placeholder for evaluation script
          echo "🎯 Running quality gate evaluation..."
          echo "✅ Quality gate passed (placeholder)"
          # Future: python eval/quality_gate.py --threshold 0.85

      - name: 📊 Upload evaluation results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: evaluation-results
          path: eval-results/

  # Deployment notification
  deploy-notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [eval-gate]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🚀 Deployment ready
        run: |
          echo "🎉 New version ready for deployment!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "SHA: ${{ github.sha }}"
